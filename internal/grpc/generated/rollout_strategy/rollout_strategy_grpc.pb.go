// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: internal/grpc/protos/rollout_strategy.proto

package rollout_strategy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RolloutStrategyService_GetRolloutStrategy_FullMethodName          = "/rolloutstrategy.RolloutStrategyService/GetRolloutStrategy"
	RolloutStrategyService_ListRolloutStrategiesByFlag_FullMethodName = "/rolloutstrategy.RolloutStrategyService/ListRolloutStrategiesByFlag"
	RolloutStrategyService_CreateRolloutStrategy_FullMethodName       = "/rolloutstrategy.RolloutStrategyService/CreateRolloutStrategy"
	RolloutStrategyService_UpdateRolloutStrategy_FullMethodName       = "/rolloutstrategy.RolloutStrategyService/UpdateRolloutStrategy"
	RolloutStrategyService_DeleteRolloutStrategy_FullMethodName       = "/rolloutstrategy.RolloutStrategyService/DeleteRolloutStrategy"
	RolloutStrategyService_TrackRolloutProgress_FullMethodName        = "/rolloutstrategy.RolloutStrategyService/TrackRolloutProgress"
)

// RolloutStrategyServiceClient is the client API for RolloutStrategyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolloutStrategyServiceClient interface {
	GetRolloutStrategy(ctx context.Context, in *GetRolloutStrategyRequest, opts ...grpc.CallOption) (*RolloutStrategyResponse, error)
	ListRolloutStrategiesByFlag(ctx context.Context, in *GetRolloutStrategiesByFlagRequest, opts ...grpc.CallOption) (*ListRolloutStrategiesResponse, error)
	CreateRolloutStrategy(ctx context.Context, in *CreateRolloutStrategyRequest, opts ...grpc.CallOption) (*RolloutStrategyResponse, error)
	UpdateRolloutStrategy(ctx context.Context, in *UpdateRolloutStrategyRequest, opts ...grpc.CallOption) (*RolloutStrategyResponse, error)
	DeleteRolloutStrategy(ctx context.Context, in *DeleteRolloutStrategyRequest, opts ...grpc.CallOption) (*Empty, error)
	TrackRolloutProgress(ctx context.Context, in *TrackRolloutProgressRequest, opts ...grpc.CallOption) (*TrackRolloutProgressResponse, error)
}

type rolloutStrategyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolloutStrategyServiceClient(cc grpc.ClientConnInterface) RolloutStrategyServiceClient {
	return &rolloutStrategyServiceClient{cc}
}

func (c *rolloutStrategyServiceClient) GetRolloutStrategy(ctx context.Context, in *GetRolloutStrategyRequest, opts ...grpc.CallOption) (*RolloutStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolloutStrategyResponse)
	err := c.cc.Invoke(ctx, RolloutStrategyService_GetRolloutStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutStrategyServiceClient) ListRolloutStrategiesByFlag(ctx context.Context, in *GetRolloutStrategiesByFlagRequest, opts ...grpc.CallOption) (*ListRolloutStrategiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolloutStrategiesResponse)
	err := c.cc.Invoke(ctx, RolloutStrategyService_ListRolloutStrategiesByFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutStrategyServiceClient) CreateRolloutStrategy(ctx context.Context, in *CreateRolloutStrategyRequest, opts ...grpc.CallOption) (*RolloutStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolloutStrategyResponse)
	err := c.cc.Invoke(ctx, RolloutStrategyService_CreateRolloutStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutStrategyServiceClient) UpdateRolloutStrategy(ctx context.Context, in *UpdateRolloutStrategyRequest, opts ...grpc.CallOption) (*RolloutStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RolloutStrategyResponse)
	err := c.cc.Invoke(ctx, RolloutStrategyService_UpdateRolloutStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutStrategyServiceClient) DeleteRolloutStrategy(ctx context.Context, in *DeleteRolloutStrategyRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RolloutStrategyService_DeleteRolloutStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutStrategyServiceClient) TrackRolloutProgress(ctx context.Context, in *TrackRolloutProgressRequest, opts ...grpc.CallOption) (*TrackRolloutProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackRolloutProgressResponse)
	err := c.cc.Invoke(ctx, RolloutStrategyService_TrackRolloutProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolloutStrategyServiceServer is the server API for RolloutStrategyService service.
// All implementations must embed UnimplementedRolloutStrategyServiceServer
// for forward compatibility.
type RolloutStrategyServiceServer interface {
	GetRolloutStrategy(context.Context, *GetRolloutStrategyRequest) (*RolloutStrategyResponse, error)
	ListRolloutStrategiesByFlag(context.Context, *GetRolloutStrategiesByFlagRequest) (*ListRolloutStrategiesResponse, error)
	CreateRolloutStrategy(context.Context, *CreateRolloutStrategyRequest) (*RolloutStrategyResponse, error)
	UpdateRolloutStrategy(context.Context, *UpdateRolloutStrategyRequest) (*RolloutStrategyResponse, error)
	DeleteRolloutStrategy(context.Context, *DeleteRolloutStrategyRequest) (*Empty, error)
	TrackRolloutProgress(context.Context, *TrackRolloutProgressRequest) (*TrackRolloutProgressResponse, error)
	mustEmbedUnimplementedRolloutStrategyServiceServer()
}

// UnimplementedRolloutStrategyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRolloutStrategyServiceServer struct{}

func (UnimplementedRolloutStrategyServiceServer) GetRolloutStrategy(context.Context, *GetRolloutStrategyRequest) (*RolloutStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolloutStrategy not implemented")
}
func (UnimplementedRolloutStrategyServiceServer) ListRolloutStrategiesByFlag(context.Context, *GetRolloutStrategiesByFlagRequest) (*ListRolloutStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolloutStrategiesByFlag not implemented")
}
func (UnimplementedRolloutStrategyServiceServer) CreateRolloutStrategy(context.Context, *CreateRolloutStrategyRequest) (*RolloutStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRolloutStrategy not implemented")
}
func (UnimplementedRolloutStrategyServiceServer) UpdateRolloutStrategy(context.Context, *UpdateRolloutStrategyRequest) (*RolloutStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolloutStrategy not implemented")
}
func (UnimplementedRolloutStrategyServiceServer) DeleteRolloutStrategy(context.Context, *DeleteRolloutStrategyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolloutStrategy not implemented")
}
func (UnimplementedRolloutStrategyServiceServer) TrackRolloutProgress(context.Context, *TrackRolloutProgressRequest) (*TrackRolloutProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackRolloutProgress not implemented")
}
func (UnimplementedRolloutStrategyServiceServer) mustEmbedUnimplementedRolloutStrategyServiceServer() {
}
func (UnimplementedRolloutStrategyServiceServer) testEmbeddedByValue() {}

// UnsafeRolloutStrategyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolloutStrategyServiceServer will
// result in compilation errors.
type UnsafeRolloutStrategyServiceServer interface {
	mustEmbedUnimplementedRolloutStrategyServiceServer()
}

func RegisterRolloutStrategyServiceServer(s grpc.ServiceRegistrar, srv RolloutStrategyServiceServer) {
	// If the following call pancis, it indicates UnimplementedRolloutStrategyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RolloutStrategyService_ServiceDesc, srv)
}

func _RolloutStrategyService_GetRolloutStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolloutStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutStrategyServiceServer).GetRolloutStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutStrategyService_GetRolloutStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutStrategyServiceServer).GetRolloutStrategy(ctx, req.(*GetRolloutStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutStrategyService_ListRolloutStrategiesByFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolloutStrategiesByFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutStrategyServiceServer).ListRolloutStrategiesByFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutStrategyService_ListRolloutStrategiesByFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutStrategyServiceServer).ListRolloutStrategiesByFlag(ctx, req.(*GetRolloutStrategiesByFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutStrategyService_CreateRolloutStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRolloutStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutStrategyServiceServer).CreateRolloutStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutStrategyService_CreateRolloutStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutStrategyServiceServer).CreateRolloutStrategy(ctx, req.(*CreateRolloutStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutStrategyService_UpdateRolloutStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolloutStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutStrategyServiceServer).UpdateRolloutStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutStrategyService_UpdateRolloutStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutStrategyServiceServer).UpdateRolloutStrategy(ctx, req.(*UpdateRolloutStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutStrategyService_DeleteRolloutStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolloutStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutStrategyServiceServer).DeleteRolloutStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutStrategyService_DeleteRolloutStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutStrategyServiceServer).DeleteRolloutStrategy(ctx, req.(*DeleteRolloutStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutStrategyService_TrackRolloutProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackRolloutProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutStrategyServiceServer).TrackRolloutProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolloutStrategyService_TrackRolloutProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutStrategyServiceServer).TrackRolloutProgress(ctx, req.(*TrackRolloutProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolloutStrategyService_ServiceDesc is the grpc.ServiceDesc for RolloutStrategyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolloutStrategyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rolloutstrategy.RolloutStrategyService",
	HandlerType: (*RolloutStrategyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRolloutStrategy",
			Handler:    _RolloutStrategyService_GetRolloutStrategy_Handler,
		},
		{
			MethodName: "ListRolloutStrategiesByFlag",
			Handler:    _RolloutStrategyService_ListRolloutStrategiesByFlag_Handler,
		},
		{
			MethodName: "CreateRolloutStrategy",
			Handler:    _RolloutStrategyService_CreateRolloutStrategy_Handler,
		},
		{
			MethodName: "UpdateRolloutStrategy",
			Handler:    _RolloutStrategyService_UpdateRolloutStrategy_Handler,
		},
		{
			MethodName: "DeleteRolloutStrategy",
			Handler:    _RolloutStrategyService_DeleteRolloutStrategy_Handler,
		},
		{
			MethodName: "TrackRolloutProgress",
			Handler:    _RolloutStrategyService_TrackRolloutProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/protos/rollout_strategy.proto",
}
