// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: internal/grpc/protos/feature_flag.proto

package feature_flag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureFlagService_GetFeatureFlag_FullMethodName      = "/featureflag.FeatureFlagService/GetFeatureFlag"
	FeatureFlagService_ListFeatureFlags_FullMethodName    = "/featureflag.FeatureFlagService/ListFeatureFlags"
	FeatureFlagService_CreateFeatureFlag_FullMethodName   = "/featureflag.FeatureFlagService/CreateFeatureFlag"
	FeatureFlagService_UpdateFeatureFlag_FullMethodName   = "/featureflag.FeatureFlagService/UpdateFeatureFlag"
	FeatureFlagService_DeleteFeatureFlag_FullMethodName   = "/featureflag.FeatureFlagService/DeleteFeatureFlag"
	FeatureFlagService_RollbackFeatureFlag_FullMethodName = "/featureflag.FeatureFlagService/RollbackFeatureFlag"
)

// FeatureFlagServiceClient is the client API for FeatureFlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureFlagServiceClient interface {
	GetFeatureFlag(ctx context.Context, in *GetFeatureFlagRequest, opts ...grpc.CallOption) (*GetFeatureFlagResponse, error)
	ListFeatureFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFeatureFlagsResponse, error)
	CreateFeatureFlag(ctx context.Context, in *CreateFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error)
	UpdateFeatureFlag(ctx context.Context, in *UpdateFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error)
	DeleteFeatureFlag(ctx context.Context, in *DeleteFeatureFlagRequest, opts ...grpc.CallOption) (*Empty, error)
	RollbackFeatureFlag(ctx context.Context, in *RollbackFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error)
}

type featureFlagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagServiceClient(cc grpc.ClientConnInterface) FeatureFlagServiceClient {
	return &featureFlagServiceClient{cc}
}

func (c *featureFlagServiceClient) GetFeatureFlag(ctx context.Context, in *GetFeatureFlagRequest, opts ...grpc.CallOption) (*GetFeatureFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeatureFlagResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_GetFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) ListFeatureFlags(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFeatureFlagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeatureFlagsResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_ListFeatureFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) CreateFeatureFlag(ctx context.Context, in *CreateFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureFlagResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_CreateFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) UpdateFeatureFlag(ctx context.Context, in *UpdateFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureFlagResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_UpdateFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) DeleteFeatureFlag(ctx context.Context, in *DeleteFeatureFlagRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, FeatureFlagService_DeleteFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) RollbackFeatureFlag(ctx context.Context, in *RollbackFeatureFlagRequest, opts ...grpc.CallOption) (*FeatureFlagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureFlagResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_RollbackFeatureFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagServiceServer is the server API for FeatureFlagService service.
// All implementations must embed UnimplementedFeatureFlagServiceServer
// for forward compatibility.
type FeatureFlagServiceServer interface {
	GetFeatureFlag(context.Context, *GetFeatureFlagRequest) (*GetFeatureFlagResponse, error)
	ListFeatureFlags(context.Context, *Empty) (*ListFeatureFlagsResponse, error)
	CreateFeatureFlag(context.Context, *CreateFeatureFlagRequest) (*FeatureFlagResponse, error)
	UpdateFeatureFlag(context.Context, *UpdateFeatureFlagRequest) (*FeatureFlagResponse, error)
	DeleteFeatureFlag(context.Context, *DeleteFeatureFlagRequest) (*Empty, error)
	RollbackFeatureFlag(context.Context, *RollbackFeatureFlagRequest) (*FeatureFlagResponse, error)
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

// UnimplementedFeatureFlagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureFlagServiceServer struct{}

func (UnimplementedFeatureFlagServiceServer) GetFeatureFlag(context.Context, *GetFeatureFlagRequest) (*GetFeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlag not implemented")
}
func (UnimplementedFeatureFlagServiceServer) ListFeatureFlags(context.Context, *Empty) (*ListFeatureFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatureFlags not implemented")
}
func (UnimplementedFeatureFlagServiceServer) CreateFeatureFlag(context.Context, *CreateFeatureFlagRequest) (*FeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatureFlag not implemented")
}
func (UnimplementedFeatureFlagServiceServer) UpdateFeatureFlag(context.Context, *UpdateFeatureFlagRequest) (*FeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatureFlag not implemented")
}
func (UnimplementedFeatureFlagServiceServer) DeleteFeatureFlag(context.Context, *DeleteFeatureFlagRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatureFlag not implemented")
}
func (UnimplementedFeatureFlagServiceServer) RollbackFeatureFlag(context.Context, *RollbackFeatureFlagRequest) (*FeatureFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackFeatureFlag not implemented")
}
func (UnimplementedFeatureFlagServiceServer) mustEmbedUnimplementedFeatureFlagServiceServer() {}
func (UnimplementedFeatureFlagServiceServer) testEmbeddedByValue()                            {}

// UnsafeFeatureFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureFlagServiceServer will
// result in compilation errors.
type UnsafeFeatureFlagServiceServer interface {
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

func RegisterFeatureFlagServiceServer(s grpc.ServiceRegistrar, srv FeatureFlagServiceServer) {
	// If the following call pancis, it indicates UnimplementedFeatureFlagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureFlagService_ServiceDesc, srv)
}

func _FeatureFlagService_GetFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).GetFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_GetFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).GetFeatureFlag(ctx, req.(*GetFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_ListFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).ListFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_ListFeatureFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).ListFeatureFlags(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_CreateFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).CreateFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_CreateFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).CreateFeatureFlag(ctx, req.(*CreateFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_UpdateFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).UpdateFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_UpdateFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).UpdateFeatureFlag(ctx, req.(*UpdateFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_DeleteFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).DeleteFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_DeleteFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).DeleteFeatureFlag(ctx, req.(*DeleteFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_RollbackFeatureFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackFeatureFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).RollbackFeatureFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_RollbackFeatureFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).RollbackFeatureFlag(ctx, req.(*RollbackFeatureFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureFlagService_ServiceDesc is the grpc.ServiceDesc for FeatureFlagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureFlagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "featureflag.FeatureFlagService",
	HandlerType: (*FeatureFlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatureFlag",
			Handler:    _FeatureFlagService_GetFeatureFlag_Handler,
		},
		{
			MethodName: "ListFeatureFlags",
			Handler:    _FeatureFlagService_ListFeatureFlags_Handler,
		},
		{
			MethodName: "CreateFeatureFlag",
			Handler:    _FeatureFlagService_CreateFeatureFlag_Handler,
		},
		{
			MethodName: "UpdateFeatureFlag",
			Handler:    _FeatureFlagService_UpdateFeatureFlag_Handler,
		},
		{
			MethodName: "DeleteFeatureFlag",
			Handler:    _FeatureFlagService_DeleteFeatureFlag_Handler,
		},
		{
			MethodName: "RollbackFeatureFlag",
			Handler:    _FeatureFlagService_RollbackFeatureFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/protos/feature_flag.proto",
}
