// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0--rc2
// source: internal/grpc/protos/segment.proto

package segment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SegmentService_GetSegment_FullMethodName    = "/segment.SegmentService/GetSegment"
	SegmentService_ListSegments_FullMethodName  = "/segment.SegmentService/ListSegments"
	SegmentService_CreateSegment_FullMethodName = "/segment.SegmentService/CreateSegment"
	SegmentService_UpdateSegment_FullMethodName = "/segment.SegmentService/UpdateSegment"
	SegmentService_DeleteSegment_FullMethodName = "/segment.SegmentService/DeleteSegment"
)

// SegmentServiceClient is the client API for SegmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SegmentServiceClient interface {
	GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error)
	ListSegments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSegmentsResponse, error)
	CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error)
	UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error)
	DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*Empty, error)
}

type segmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSegmentServiceClient(cc grpc.ClientConnInterface) SegmentServiceClient {
	return &segmentServiceClient{cc}
}

func (c *segmentServiceClient) GetSegment(ctx context.Context, in *GetSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SegmentResponse)
	err := c.cc.Invoke(ctx, SegmentService_GetSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) ListSegments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSegmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSegmentsResponse)
	err := c.cc.Invoke(ctx, SegmentService_ListSegments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) CreateSegment(ctx context.Context, in *CreateSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SegmentResponse)
	err := c.cc.Invoke(ctx, SegmentService_CreateSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) UpdateSegment(ctx context.Context, in *UpdateSegmentRequest, opts ...grpc.CallOption) (*SegmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SegmentResponse)
	err := c.cc.Invoke(ctx, SegmentService_UpdateSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *segmentServiceClient) DeleteSegment(ctx context.Context, in *DeleteSegmentRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SegmentService_DeleteSegment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SegmentServiceServer is the server API for SegmentService service.
// All implementations must embed UnimplementedSegmentServiceServer
// for forward compatibility.
type SegmentServiceServer interface {
	GetSegment(context.Context, *GetSegmentRequest) (*SegmentResponse, error)
	ListSegments(context.Context, *Empty) (*ListSegmentsResponse, error)
	CreateSegment(context.Context, *CreateSegmentRequest) (*SegmentResponse, error)
	UpdateSegment(context.Context, *UpdateSegmentRequest) (*SegmentResponse, error)
	DeleteSegment(context.Context, *DeleteSegmentRequest) (*Empty, error)
	mustEmbedUnimplementedSegmentServiceServer()
}

// UnimplementedSegmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSegmentServiceServer struct{}

func (UnimplementedSegmentServiceServer) GetSegment(context.Context, *GetSegmentRequest) (*SegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (UnimplementedSegmentServiceServer) ListSegments(context.Context, *Empty) (*ListSegmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSegments not implemented")
}
func (UnimplementedSegmentServiceServer) CreateSegment(context.Context, *CreateSegmentRequest) (*SegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSegment not implemented")
}
func (UnimplementedSegmentServiceServer) UpdateSegment(context.Context, *UpdateSegmentRequest) (*SegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSegment not implemented")
}
func (UnimplementedSegmentServiceServer) DeleteSegment(context.Context, *DeleteSegmentRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSegment not implemented")
}
func (UnimplementedSegmentServiceServer) mustEmbedUnimplementedSegmentServiceServer() {}
func (UnimplementedSegmentServiceServer) testEmbeddedByValue()                        {}

// UnsafeSegmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SegmentServiceServer will
// result in compilation errors.
type UnsafeSegmentServiceServer interface {
	mustEmbedUnimplementedSegmentServiceServer()
}

func RegisterSegmentServiceServer(s grpc.ServiceRegistrar, srv SegmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedSegmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SegmentService_ServiceDesc, srv)
}

func _SegmentService_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SegmentService_GetSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).GetSegment(ctx, req.(*GetSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_ListSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).ListSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SegmentService_ListSegments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).ListSegments(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_CreateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).CreateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SegmentService_CreateSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).CreateSegment(ctx, req.(*CreateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_UpdateSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).UpdateSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SegmentService_UpdateSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).UpdateSegment(ctx, req.(*UpdateSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SegmentService_DeleteSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SegmentServiceServer).DeleteSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SegmentService_DeleteSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SegmentServiceServer).DeleteSegment(ctx, req.(*DeleteSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SegmentService_ServiceDesc is the grpc.ServiceDesc for SegmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SegmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "segment.SegmentService",
	HandlerType: (*SegmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSegment",
			Handler:    _SegmentService_GetSegment_Handler,
		},
		{
			MethodName: "ListSegments",
			Handler:    _SegmentService_ListSegments_Handler,
		},
		{
			MethodName: "CreateSegment",
			Handler:    _SegmentService_CreateSegment_Handler,
		},
		{
			MethodName: "UpdateSegment",
			Handler:    _SegmentService_UpdateSegment_Handler,
		},
		{
			MethodName: "DeleteSegment",
			Handler:    _SegmentService_DeleteSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/protos/segment.proto",
}
